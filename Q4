#include <iostream>
#include <sstream>
#include <string>
#include <queue>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Codec {
public:
    // Encodes a tree to a single string.
    std::string serialize(TreeNode* root) {
        if (!root) return "#";
        std::ostringstream out;
        serializeHelper(root, out);
        return out.str();
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(const std::string& data) {
        std::istringstream in(data);
        return deserializeHelper(in);
    }

private:
    void serializeHelper(TreeNode* node, std::ostringstream& out) {
        if (!node) {
            out << "# ";
            return;
        }
        out << node->val << " ";
        serializeHelper(node->left, out);
        serializeHelper(node->right, out);
    }

    TreeNode* deserializeHelper(std::istringstream& in) {
        std::string val;
        in >> val;
        if (val == "#") return nullptr;
        TreeNode* node = new TreeNode(std::stoi(val));
        node->left = deserializeHelper(in);
        node->right = deserializeHelper(in);
        return node;
    }
};

// Helper function to print the tree (inorder traversal)
void printTree(TreeNode* root) {
    if (!root) return;
    printTree(root->left);
    std::cout << root->val << " ";
    printTree(root->right);
}

int main() {
    Codec codec;

    // Create a sample tree:    1
    //                        /   \
    //                       2     3
    //                            / \
    //                           4   5
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->